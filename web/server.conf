upstream api {
    # UNIXドメインソケットを使う場合
    # server unix:/tmp/gunicorn_socket/gunicorn_flask.sock fail_timeout=0;

    # TCPソケットを使う場合
    server api:5000 fail_timeout=0;
    #server host.docker.internal:5001 fail_timeout=0;

    #keepalive 120;
}
upstream app {
    # UNIXドメインソケットを使う場合
    # server unix:/tmp/gunicorn_socket/gunicorn_flask.sock fail_timeout=0;

    # TCPソケットを使う場合
    server app:3000 fail_timeout=0;
    #server host.docker.internal:5001 fail_timeout=0;
}

server {
        listen 80;
        #server_name  localhost;

        server_name kagomma.info www.kagomma.info;
        server_tokens off;

        client_max_body_size 8000m;
        client_body_buffer_size 8000m;
        client_body_timeout 300;

        proxy_pass_request_headers on;
        proxy_request_buffering off;
        proxy_buffering off;
        #chunked_transfer_encoding on;

        # 以下はSSL化のチャレンジという工程で必要
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
            default_type "text/plain";
        }

        location / {
            return 301 https://kagomma.info$request_uri;
        }
}

server {
    server_name  kagomma.info;

    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_certificate      /etc/nginx/ssl/live/kagomma.info/fullchain.pem;
    ssl_certificate_key  /etc/nginx/ssl/live/kagomma.info/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    add_header Strict-Transport-Security "max-age=2592000" always;

    # setting for stream response ---------- from here

    client_max_body_size 8000m;
    client_body_buffer_size 8000m;
    client_body_timeout 300;

    proxy_pass_request_headers on;
    proxy_request_buffering off;

    # レスポンスがバッファリングされるかどうか。ストリームレスポンスの場合、この設定をoffにする
    proxy_buffering off;

    # setting for stream response ---------- to here

    #root /var/www/html;

    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    location /api/_content {
        proxy_pass http://app;
    }

    location /api {
        proxy_pass http://api;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 20230530
        proxy_read_timeout 1800;
        proxy_connect_timeout 1800;
    }

    location / {
        proxy_pass http://app;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
